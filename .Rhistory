formula = y ~ poly(x, 10),
se = F,
size = 1.5,
color = "#fe7370",
alpha = 0.1) +
xlab("Gathering Size (number of members per group)") +
ylab("Outbreak Size (number of cases)") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill = "grey99",
colour = "grey80"),
plot.title = element_text(hjust = 0.5))
dev.off()
# Visualize the results and save them to a PDF
pdf("figures.pdf", height = 4, width = 6)
ggplot(data = results2, aes(x = group.size, y = outbreak.size)) +
geom_point(size = 3, color = "#04bcc6", alpha = 0.1) +
stat_smooth(method = lm,
formula = y ~ poly(x, 10),
se = F,
size = 1.5,
color = "#fe7370",
alpha = 0.1) +
xlab("Gathering Size (number of members)") +
ylab("Outbreak Size (number of cases)") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill = "grey99",
colour = "grey80"),
plot.title = element_text(hjust = 0.5))
dev.off()
ggplot(data = results2, aes(x = group.size, y = outbreak.size)) +
geom_point(size = 3, color = "#04bcc6", alpha = 0.1) +
stat_smooth(method = lm,
formula = y ~ poly(x, 8),
se = F,
size = 1.5,
color = "#fe7370",
alpha = 0.1) +
xlab("Gathering Size (number of members)") +
ylab("Outbreak Size (number of cases)") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill = "grey99",
colour = "grey80"),
plot.title = element_text(hjust = 0.5))
ggplot(data = results2, aes(x = group.size, y = outbreak.size)) +
geom_point(size = 3, color = "#04bcc6", alpha = 0.1) +
stat_smooth(method = lm,
formula = y ~ poly(x, 7),
se = F,
size = 1.5,
color = "#fe7370",
alpha = 0.1) +
xlab("Gathering Size (number of members)") +
ylab("Outbreak Size (number of cases)") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill = "grey99",
colour = "grey80"),
plot.title = element_text(hjust = 0.5))
ggplot(data = results2, aes(x = group.size, y = outbreak.size)) +
geom_point(size = 3, color = "#04bcc6", alpha = 0.1) +
stat_smooth(method = lm,
formula = y ~ poly(x, 5),
se = F,
size = 1.5,
color = "#fe7370",
alpha = 0.1) +
xlab("Gathering Size (number of members)") +
ylab("Outbreak Size (number of cases)") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill = "grey99",
colour = "grey80"),
plot.title = element_text(hjust = 0.5))
ggplot(data = results2, aes(x = group.size, y = outbreak.size)) +
geom_point(size = 3, color = "#04bcc6", alpha = 0.1) +
stat_smooth(method = lm,
formula = y ~ poly(x, 12),
se = F,
size = 1.5,
color = "#fe7370",
alpha = 0.1) +
xlab("Gathering Size (number of members)") +
ylab("Outbreak Size (number of cases)") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill = "grey99",
colour = "grey80"),
plot.title = element_text(hjust = 0.5))
ggplot(data = results2, aes(x = group.size, y = outbreak.size)) +
geom_point(size = 3, color = "#04bcc6", alpha = 0.1) +
stat_smooth(method = lm,
formula = y ~ poly(x, 11),
se = F,
size = 1.5,
color = "#fe7370",
alpha = 0.1) +
xlab("Gathering Size (number of members)") +
ylab("Outbreak Size (number of cases)") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill = "grey99",
colour = "grey80"),
plot.title = element_text(hjust = 0.5))
pdf("figures.pdf", height = 4, width = 6)
ggplot(data = results2, aes(x = group.size, y = outbreak.size)) +
geom_point(size = 3, color = "#04bcc6", alpha = 0.1) +
stat_smooth(method = lm,
formula = y ~ poly(x, 11),
se = F,
size = 1.5,
color = "#fe7370",
alpha = 0.1) +
xlab("Gathering Size (number of members)") +
ylab("Outbreak Size (number of cases)") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill = "grey99",
colour = "grey80"),
plot.title = element_text(hjust = 0.5))
dev.off()
pdf("figures.pdf", height = 4, width = 6)
ggplot(data = results2, aes(x = group.size, y = outbreak.size)) +
geom_point(size = 3, color = "#04bcc6", alpha = 0.1) +
stat_smooth(method = lm,
formula = y ~ poly(x, 11),
se = F,
size = 1.5,
color = "#fe7370",
alpha = 0.1) +
xlab("Gathering Size (number of members)") +
ylab("Outbreak Size (number of cases)") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill = "grey99",
colour = "grey80"),
plot.title = element_text(hjust = 0.5))
dev.off()
ggplot(data = results2, aes(x = group.size, y = outbreak.size)) +
geom_point(size = 3, color = "#04bcc6", alpha = 0.1) +
stat_smooth(method = lm,
formula = y ~ poly(x, 11),
se = F,
size = 1.5,
color = "#fe7370",
alpha = 0.1) +
xlab("Gathering Size (number of members)") +
ylab("Outbreak Size (number of cases)") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill = "grey99",
colour = "grey80"),
plot.title = element_text(hjust = 0.5))
pdf("figures.pdf", height = 4, width = 6)
ggplot(data = results2, aes(x = group.size, y = outbreak.size)) +
geom_point(size = 3, color = "#04bcc6", alpha = 0.1) +
stat_smooth(method = lm,
formula = y ~ poly(x, 11),
se = F,
size = 1.5,
color = "#fe7370",
alpha = 0.1) +
xlab("Gathering Size (number of members)") +
ylab("Outbreak Size (number of cases)") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill = "grey99",
colour = "grey80"),
plot.title = element_text(hjust = 0.5))
dev.off()
# Visualize the results and save them to a PDF
pdf("figures.pdf", height = 4, width = 6)
ggplot(data = results2, aes(x = group.size, y = outbreak.size)) +
geom_point(size = 3, color = "#04bcc6", alpha = 0.1) +
stat_smooth(method = lm,
formula = y ~ poly(x, 11),
se = F,
size = 1.5,
color = "#fe7370",
alpha = 0.1) +
xlab("Gathering Size (number of members)") +
ylab("Outbreak Size (number of cases)") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill = "grey99",
colour = "grey80"),
plot.title = element_text(hjust = 0.5))
dev.off()
ggplot(data = results2, aes(x = group.size, y = outbreak.size)) +
geom_point(size = 3, color = "#04bcc6", alpha = 0.1) +
stat_smooth(method = lm,
formula = y ~ poly(x, 11),
se = F,
size = 1.5,
color = "#fe7370",
alpha = 0.1) +
xlab("Gathering Size (number of members)") +
ylab("Outbreak Size (number of cases)") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill = "grey99",
colour = "grey80"),
plot.title = element_text(hjust = 0.5))
ggplot(data = results2, aes(x = group.size, y = outbreak.size)) +
geom_point(size = 3, color = "#04bcc6", alpha = 0.1) +
stat_smooth(method = lm,
formula = y ~ poly(x, 12),
se = F,
size = 1.5,
color = "#fe7370",
alpha = 0.1) +
xlab("Gathering Size (number of members)") +
ylab("Outbreak Size (number of cases)") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill = "grey99",
colour = "grey80"),
plot.title = element_text(hjust = 0.5))
ggplot(data = results2, aes(x = group.size, y = outbreak.size)) +
geom_point(size = 3, color = "#04bcc6", alpha = 0.1) +
stat_smooth(method = lm,
formula = y ~ poly(x, 13),
se = F,
size = 1.5,
color = "#fe7370",
alpha = 0.1) +
xlab("Gathering Size (number of members)") +
ylab("Outbreak Size (number of cases)") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill = "grey99",
colour = "grey80"),
plot.title = element_text(hjust = 0.5))
ggplot(data = results2, aes(x = group.size, y = outbreak.size)) +
geom_point(size = 3, color = "#04bcc6", alpha = 0.1) +
stat_smooth(method = lm,
formula = y ~ poly(x, 13),
se = F,
size = 1.5,
color = "#fe7370",
alpha = 0.1) +
xlab("Gathering Size (number of members)") +
ylab("Outbreak Size (number of cases)") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill = "grey99",
colour = "grey80"),
plot.title = element_text(hjust = 0.5))
ggplot(data = results2, aes(x = group.size, y = outbreak.size)) +
geom_point(size = 3, color = "#04bcc6", alpha = 0.1) +
stat_smooth(method = lm,
formula = y ~ poly(x, 11),
se = F,
size = 1.5,
color = "#fe7370",
alpha = 0.1) +
xlab("Gathering Size (number of members)") +
ylab("Outbreak Size (number of cases)") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill = "grey99",
colour = "grey80"),
plot.title = element_text(hjust = 0.5))
# Create the initial population
N <- 1000  # total population
I.prop <- 0.01  # proportion infected
I <- round(N * I.prop)  # initial number infected
S <- N - I
R <- 0
t.max <- 1000  # maximum timestep (run duration)
pop <- c(rep(0, S), rep(1, R), rep(2, I))
pop <- c(rep(0, S), rep(1, R), rep(2, I))
pop
# Create the initial population
N <- 1000  # total population
I.prop <- 0.01  # proportion infected
I <- round(N * I.prop)  # initial number infected
S <- N - I
R <- 0
t.max <- 1000  # maximum timestep (run duration)
pop <- c(rep(0, S), rep(1, R), rep(2, I))
# Value = 0 means susceptible
# Value = 1 means removed
# Value >= 2 means infected
# Set other model parameters
# Average contacts per person per hour
contacts.per.hour <- 16 / 24
p.transmit <- 0.1475
group.size <- 20
num.groups <- round(N * contacts.per.hour)
t.recovery <- 240
# Spread function
# 1st arg = population vector for previous time period
# 2nd arg = current time step
spread <- function(population = pop, history = NULL) {
# Save a new copy of the population
pop.copy <- population
# If history is null
if(is.null(history)) {
# Create a new data frame to store the population history.
hist.df <- data.frame(time = numeric(),
S = numeric(),
I = numeric(),
R = numeric())
}
# Add a single row containing the counts of each population type.
hist.df[nrow(hist.df) + 1,] <- list(0,
length(pop.copy[pop.copy == 0]),
length(pop.copy[pop.copy >= 2]),
length(pop.copy[pop.copy == 1]))
# At each timestep...
for(timestep in 1:t.max) {
# Randomly sample the population a number of times equal to num.groups.
# Each sample corresponds to a social gathering.
for(i in num.groups) {
# Sample a number of indices equal to group.size
indices <- sample(1:length(pop.copy), group.size)
# Create a counter to store the number of infected people in the group
I.here <- 0
# Check whether each person in pop at the indices sampled is infected
for(j in indices) {
# If the person is infected, increase I.here by 1
if(pop.copy[j] >= 2) {
I.here <- I.here + 1
}
}
# If I.here > 0...
if(I.here > 0) {
# Check whether each person in pop at the indices sampled is susceptible
for (j in indices) {
# If the person is susceptible...
if(pop.copy[j] == 0) {
# Change the person to infected with a probability of p.transmit
# for EACH infected person in the group.
if(min(runif(I.here, 0, 1)) < p.transmit) {
pop.copy[j] <- 2
}
}
}
}
}
# Check if each person in the population is infected
for(i in 1:length(pop.copy)) {
# If the person is infected...
if(pop.copy[i] >= 2) {
# Increment the person's state by 1/t.recovery.
pop.copy[i] <- pop.copy[i] + 1 / t.recovery
# If the person's state >= 3, change the person's status to
# recovered.
if(pop.copy[i] >= 3) {
pop.copy[i] <- 1
}
}
}
# Append the updated S, I, and R counts to hist.df
# Add a single row containing the counts of each population type.
hist.df[nrow(hist.df) + 1,] <- list(timestep,
length(pop.copy[pop.copy == 0]),
length(pop.copy[pop.copy >= 2]),
length(pop.copy[pop.copy == 1]))
}
# If we're about to the maximum time step...
if (timestep == t.max) {
# Output the population history
return(hist.df)
}
}
# Outbreak size function. Calculates I + R at last timestep of an outbreak.
outbreak.size <- function(outbreak) {
return(outbreak$I[length(outbreak$I)] + outbreak$R[length(outbreak$R)])
}
temp <- spread()
View(temp)
hist.df <- data.frame(time = numeric(),
S = numeric(),
I = numeric(),
R = numeric())
View(hist.df)
I.here <- 3
runif(I.here, 0, 1)
1 / t.recovery
# Create the initial population
N <- 1000  # total population
I.prop <- 0.01  # proportion infected
I <- round(N * I.prop)  # initial number infected
S <- N - I
R <- 0
t.max <- 1000  # maximum timestep (run duration)
pop <- c(rep(0, S), rep(1, R), rep(2, I))
# Value = 0 means susceptible
# Value = 1 means removed
# Value >= 2 means infected
# Set other model parameters
# Average contacts per person per hour
contacts.per.hour <- 16 / 24
p.transmit <- 0.1475
group.size <- 20
num.groups <- round(N * contacts.per.hour)
t.recovery <- 240
# Spread function
# 1st arg = population vector for previous time period
# 2nd arg = current time step
spread <- function(population = pop, history = NULL) {
# Save a new copy of the population
pop.copy <- population
# If history is null
if(is.null(history)) {
# Create a new data frame to store the population history.
hist.df <- data.frame(time = numeric(),
S = numeric(),
I = numeric(),
R = numeric())
}
# Add a single row containing the counts of each population type.
hist.df[nrow(hist.df) + 1,] <- list(0,
length(pop.copy[pop.copy == 0]),
length(pop.copy[pop.copy >= 2]),
length(pop.copy[pop.copy == 1]))
# At each timestep...
for(timestep in 1:t.max) {
# Randomly sample the population a number of times equal to num.groups.
# Each sample corresponds to a social gathering.
for(i in num.groups) {
# Sample a number of indices equal to group.size
indices <- sample(1:length(pop.copy), group.size)
# Create a counter to store the number of infected people in the group
I.here <- 0
# Check whether each person in pop at the indices sampled is infected
for(j in indices) {
# If the person is infected, increase I.here by 1
if(pop.copy[j] >= 2) {
I.here <- I.here + 1
}
}
# If I.here > 0...
if(I.here > 0) {
# Check whether each person in pop at the indices sampled is susceptible
for (j in indices) {
# If the person is susceptible...
if(pop.copy[j] == 0) {
# Change the person to infected with a probability of p.transmit
# for EACH infected person in the group.
if(min(runif(I.here, 0, 1)) < p.transmit) {
pop.copy[j] <- 2
}
}
}
}
}
# Check if each person in the population is infected
for(i in 1:length(pop.copy)) {
# If the person is infected...
if(pop.copy[i] >= 2) {
# Increment the person's state by 1/t.recovery.
pop.copy[i] <- pop.copy[i] + 1 / t.recovery
# If the person's state >= 3, change the person's status to
# removed.
if(pop.copy[i] >= 3) {
pop.copy[i] <- 1
}
}
}
# Append the updated S, I, and R counts to hist.df
# Add a single row containing the counts of each population type.
hist.df[nrow(hist.df) + 1,] <- list(timestep,
length(pop.copy[pop.copy == 0]),
length(pop.copy[pop.copy >= 2]),
length(pop.copy[pop.copy == 1]))
}
# Output the population history
return(hist.df)
}
# Outbreak size function. Calculates I + R at last timestep of an outbreak.
outbreak.size <- function(outbreak) {
return(outbreak$I[length(outbreak$I)] + outbreak$R[length(outbreak$R)])
}
spread()
results <- spread()
# Plot the results
ggplot(data = results, aes(x = time, y = I)) +
geom_line()
outbreak.size(results)
# Libraries
library(ggplot2)
results <- spread()
# Plot the results
ggplot(data = results, aes(x = time, y = I)) +
geom_line()
outbreak.size(results)
# Plot the results
ggplot(data = results, aes(x = time, y = I)) +
geom_line()
outbreak.size(results)
